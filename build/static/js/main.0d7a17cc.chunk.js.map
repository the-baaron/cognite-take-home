{"version":3,"sources":["components/CountryTable.jsx","components/LanguageTable.jsx","components/Summary.jsx","App.jsx","index.jsx"],"names":["CountryTable","countryData","inputEl","React","useRef","useState","filteredCountryData","setFilteredCountryData","category","order","sortSettings","setSortSettings","sortFn","aTmp","bTmp","a","b","localeCompare","handleSortClick","ref","onChange","inputValue","current","value","toLowerCase","filter","data","name","includes","region","sort","placeholder","onClick","map","country","getUnicodeFlagIcon","alpha2Code","area","squareKM","Math","round","population","LanguageTable","languages","setLanguages","useEffect","newLanguages","forEach","language","Object","entries","countries","join","Summary","arr","reduce","acc","val","length","max","obj","App","setCountryData","axios","get","then","res","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0d7a17cc.chunk.js","sourcesContent":["import React from \"react\";\nimport getUnicodeFlagIcon from \"country-flag-icons/unicode\";\n\n/**\n * Main CountryTable component\n */\nexport const CountryTable = ({ countryData }) => {\n  const inputEl = React.useRef(null);\n  const [filteredCountryData, setFilteredCountryData] =\n    React.useState(countryData);\n  const [sortSettings, setSortSettings] = React.useState({\n    category: \"name\",\n    order: \"asc\",\n  });\n\n  /**\n   * Converts Square Kilometers to Square Miles\n   * 1 KM2 = 0.386102 Miles2\n   */\n  const KmtoMile = (squareKM) => Math.round(squareKM / 0.386102);\n\n  /**\n   * The sorting function that sorts by the selected category, asc or desc\n   */\n  const sortFn = (aTmp, bTmp) => {\n    const { category } = sortSettings;\n    const a = sortSettings.order === \"asc\" ? aTmp[category] : bTmp[category];\n    const b = sortSettings.order === \"asc\" ? bTmp[category] : aTmp[category];\n\n    // If a is a string, we assume that b is a string too\n    if (typeof a === \"string\") return a.localeCompare(b);\n\n    // Otherwise, it's a number\n    return a - b;\n  };\n\n  /**\n   * Filters countries based on name or region\n   */\n  const handleSearchInput = () => {\n    const inputValue = inputEl.current.value.toLowerCase();\n    setFilteredCountryData(\n      countryData\n        .filter(\n          (data) =>\n            data.name.toLowerCase().includes(inputValue) ||\n            data.region.toLowerCase().includes(inputValue)\n        )\n        .sort(sortFn)\n    );\n  };\n\n  /**\n   * The actual sorting function\n   */\n  const handleSortClick = (category) => {\n    // If the category doesn't change, switch order\n    if (category === sortSettings.category) {\n      setSortSettings({\n        category,\n        order: sortSettings.order === \"asc\" ? \"desc\" : \"asc\",\n      });\n    } else {\n      setSortSettings({\n        category,\n        order: \"asc\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <input\n        ref={inputEl}\n        onChange={handleSearchInput}\n        placeholder=\"Search for coutries or regions...\"\n      />\n\n      <table>\n        <thead>\n          <tr>\n            <th />\n            <th onClick={() => handleSortClick(\"name\")}>Name</th>\n            <th onClick={() => handleSortClick(\"region\")}>Region</th>\n            <th onClick={() => handleSortClick(\"area\")}>Area</th>\n            <th onClick={() => handleSortClick(\"population\")}>Population</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {filteredCountryData.sort(sortFn).map((country) => (\n            <tr key={country.alpha2Code}>\n              <td>{getUnicodeFlagIcon(country.alpha2Code)}</td>\n              <td>{country.name}</td>\n              <td>{country.region}</td>\n              <td>\n                {country.area ? (\n                  <>\n                    <strong>{KmtoMile(country.area)}</strong> square miles\n                  </>\n                ) : (\n                  <em>Unknown</em>\n                )}\n              </td>\n              <td>\n                <strong>{Math.round(country.population / 100000) / 10}</strong>{\" \"}\n                milion\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React from \"react\";\n\nexport const LanguageTable = ({ countryData }) => {\n  const [languages, setLanguages] = React.useState({});\n\n  React.useEffect(() => {\n    const newLanguages = {};\n\n    // Pretty ugly, but running out of time :)\n    countryData.forEach((country) => {\n      country.languages.forEach((language) => {\n        newLanguages[language.name] = [\n          ...(newLanguages[language.name] || []),\n          country.name,\n        ];\n      });\n    });\n\n    setLanguages(newLanguages);\n  }, [countryData]);\n\n  return (\n    <>\n      <table>\n        <thead>\n          <tr>\n            <th>Language</th>\n            <th>Countries</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {Object.entries(languages).map(([language, countries]) => {\n            return (\n              <tr key={language}>\n                <td>\n                  <strong>{language}</strong>\n                </td>\n                <td>{countries.join(\", \")}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React from \"react\";\n\nexport const Summary = ({ countryData }) => {\n  const getAveragePopulation = (arr) => {\n    return Math.round(\n      arr.reduce((acc, val) => acc + val.population / arr.length, 0)\n    );\n  };\n\n  const getBiggestCountry = () => {\n    return countryData\n      .filter(({ area }) => area)\n      .reduce((max, obj) => (max.area > obj.area ? max : obj));\n  };\n\n  // Bit of duplicate code here :D\n  const getSmallestCountry = () => {\n    return countryData\n      .filter(({ area }) => area)\n      .reduce((max, obj) => (max.area < obj.area ? max : obj));\n  };\n\n  return (\n    <>\n      <p>\n        Average population per country:{\" \"}\n        <strong>{getAveragePopulation(countryData)}</strong>\n      </p>\n\n      <p>\n        Biggest country: <strong>{getBiggestCountry().name}</strong>\n      </p>\n\n      <p>\n        Smallest country: <strong>{getSmallestCountry().name}</strong>\n      </p>\n    </>\n  );\n};\n","import React from \"react\";\nimport axios from \"axios\";\n\nimport { CountryTable } from \"./components/CountryTable\";\nimport { LanguageTable } from \"./components/LanguageTable\";\nimport { Summary } from \"./components/Summary\";\n\nimport \"./App.css\";\n\n/**\n * Main app component\n */\nfunction App() {\n  const [countryData, setCountryData] = React.useState();\n\n  /**\n   * Retrieve the data from the API when the page loads\n   */\n  React.useEffect(() => {\n    axios.get(\"https://restcountries.com/v2/all\").then((res) => {\n      setCountryData(res.data);\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {countryData ? (\n        <>\n          <CountryTable countryData={countryData} />\n          <LanguageTable countryData={countryData} />\n          <Summary countryData={countryData} />\n        </>\n      ) : (\n        <h1>Loading...</h1>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}